{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "T4",
      "mount_file_id": "10VWuCBoEWpH18LLZsY8GH-W2qwB1b3iW",
      "authorship_tag": "ABX9TyOZs4AFbLsvXK4OKI7R0y7q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LEESUSUSUSU/Dacon/blob/main/Traffic_accident_damage_prediction_final_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import glob\n",
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "import os\n",
        "import numpy as np\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams['font.family'] = 'Malgun Gothic'\n",
        "import seaborn as sns\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n"
      ],
      "metadata": {
        "id": "E9NDkya3hQRs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UOddz7k1g2wF",
        "outputId": "499c6fef-113b-4db6-f99a-4c42445e8613"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: geopandas in /usr/local/lib/python3.10/dist-packages (0.13.2)\n",
            "Requirement already satisfied: fiona>=1.8.19 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.9.5)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from geopandas) (23.2)\n",
            "Requirement already satisfied: pandas>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.5.3)\n",
            "Requirement already satisfied: pyproj>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (3.6.1)\n",
            "Requirement already satisfied: shapely>=1.7.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (2.0.2)\n",
            "Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (23.1.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (2023.11.17)\n",
            "Requirement already satisfied: click~=8.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (8.1.7)\n",
            "Requirement already satisfied: click-plugins>=1.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.1.1)\n",
            "Requirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (0.7.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.16.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (67.7.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2023.3.post1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (1.23.5)\n",
            "Requirement already satisfied: geopy in /usr/local/lib/python3.10/dist-packages (2.3.0)\n",
            "Requirement already satisfied: geographiclib<3,>=1.52 in /usr/local/lib/python3.10/dist-packages (from geopy) (2.0)\n"
          ]
        }
      ],
      "source": [
        "! pip install geopandas\n",
        "! pip install geopy"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 각 gpkg 파일은 분리되어 있는것 같다. 합쳐주기 위해서 folder path를 받아오자\n",
        "old_f_path = r'/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역'\n",
        "jaywalk_f_path = r'/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/5. 보행자무단횡단사고 다발지역'\n",
        "ice_f_path = r'/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/8. 결빙사고 다발지역'\n",
        "truck_f_path = r'/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/9. 화물차사고 다발지역'\n",
        "walker_f_path = r'/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역'\n",
        "\n",
        "# 각 folder path 내에서 gpkg 확장자 파일의 이름을 추출해서 list로 만들자\n",
        "old_fnames = glob.glob(f'{old_f_path}/*.gpkg')\n",
        "jaywalk_fnames = glob.glob(f'{jaywalk_f_path}/*.gpkg')\n",
        "ice_fnames = glob.glob(f'{ice_f_path}/*.gpkg')\n",
        "truck_fnames = glob.glob(f'{truck_f_path}/*.gpkg')\n",
        "walker_fnames = glob.glob(f'{walker_f_path}/*.gpkg')\n",
        "\n",
        "# fnames 변수의 list를 만들자\n",
        "fname_list = [old_fnames, jaywalk_fnames, ice_fnames, truck_fnames, walker_fnames]\n"
      ],
      "metadata": {
        "id": "PS8i4zPXhWSb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for name in fname_list:\n",
        "    print(len(name), '|', name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N7M9mHmRh8Ks",
        "outputId": "56fca0b8-a4cd-4ef2-af9c-cb1fe932f01f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 | ['/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_100.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_500.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_300.gpkg']\n",
            "3 | ['/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/5. 보행자무단횡단사고 다발지역/보행자무단횡단사고 다발지역_100.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/5. 보행자무단횡단사고 다발지역/보행자무단횡단사고 다발지역_500.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/5. 보행자무단횡단사고 다발지역/보행자무단횡단사고 다발지역_300.gpkg']\n",
            "3 | ['/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/8. 결빙사고 다발지역/결빙사고 다발지역 _300.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/8. 결빙사고 다발지역/결빙사고 다발지역 _100.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/8. 결빙사고 다발지역/결빙사고 다발지역 _500.gpkg']\n",
            "3 | ['/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/9. 화물차사고 다발지역/화물차사고 다발지역_100.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/9. 화물차사고 다발지역/화물차사고 다발지역_300.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/9. 화물차사고 다발지역/화물차사고 다발지역_500.gpkg']\n",
            "3 | ['/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_100.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_500.gpkg', '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_300.gpkg']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# gdf_merge 함수 선언\n",
        "# 기능 : filenames 경로의 gpkg 파일을 받아서 geopandas 형식의 dataframe으로 read하고 분리된 파일을 병합하는 함수\n",
        "# input - filenames : mesge하려는 gpkg 파일 경로를 item으로 하는 list\n",
        "# output - merged_df(병합된 df), gdfs (df의 각각 list ~ 선택)\n",
        "\n",
        "def gpd_merge(file_names):\n",
        "\n",
        "    gdfs = []\n",
        "\n",
        "    # Load each GeoPackage file in the list\n",
        "    for file_name in file_names:\n",
        "        try:\n",
        "            gdf = gpd.read_file(file_name, encoding='cp949')\n",
        "\n",
        "            gdf = gdf.dropna()\n",
        "\n",
        "            gdfs.append(gdf)\n",
        "\n",
        "            print(f\"Loaded GeoPackage file: {file_name}\")\n",
        "            print(f\"Number of rows after removing missing values: {len(gdf)}\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error loading file {file_name}: {e}\")\n",
        "\n",
        "    # 좌표계 변환 : EPSG:5179 -> EPSG:4326\n",
        "    merged_gdf = pd.concat(gdfs, axis=0)\n",
        "    merged_gdf.geometry = merged_gdf.geometry.to_crs('EPSG:4326')\n",
        "\n",
        "    # geometry 열로부터 위도, 경도 열을 추가함 (multipoligon의 center?)\n",
        "    merged_gdf['위도'] = merged_gdf['geometry'].apply(lambda geom: geom.centroid.y if geom.geom_type == 'Point' else geom.centroid.y)\n",
        "    merged_gdf['경도'] = merged_gdf['geometry'].apply(lambda geom: geom.centroid.x if geom.geom_type == 'Point' else geom.centroid.x)\n",
        "\n",
        "    return merged_gdf"
      ],
      "metadata": {
        "id": "TN9D813wh_YX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "old_df     = gpd_merge(old_fnames)\n",
        "jaywalk_df = gpd_merge(jaywalk_fnames)\n",
        "ice_df     = gpd_merge(ice_fnames)\n",
        "truck_df   = gpd_merge(truck_fnames)\n",
        "walker_df  = gpd_merge(walker_fnames)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cbz6DTmBiCOJ",
        "outputId": "63e3508b-4d29-4b49-975f-145ad6ff8553"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_100.gpkg\n",
            "Number of rows after removing missing values: 287\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_500.gpkg\n",
            "Number of rows after removing missing values: 71\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_300.gpkg\n",
            "Number of rows after removing missing values: 94\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/5. 보행자무단횡단사고 다발지역/보행자무단횡단사고 다발지역_100.gpkg\n",
            "Number of rows after removing missing values: 378\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/5. 보행자무단횡단사고 다발지역/보행자무단횡단사고 다발지역_500.gpkg\n",
            "Number of rows after removing missing values: 48\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/5. 보행자무단횡단사고 다발지역/보행자무단횡단사고 다발지역_300.gpkg\n",
            "Number of rows after removing missing values: 83\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/8. 결빙사고 다발지역/결빙사고 다발지역 _300.gpkg\n",
            "Number of rows after removing missing values: 8\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/8. 결빙사고 다발지역/결빙사고 다발지역 _100.gpkg\n",
            "Number of rows after removing missing values: 30\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/8. 결빙사고 다발지역/결빙사고 다발지역 _500.gpkg\n",
            "Number of rows after removing missing values: 6\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/9. 화물차사고 다발지역/화물차사고 다발지역_100.gpkg\n",
            "Number of rows after removing missing values: 202\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/9. 화물차사고 다발지역/화물차사고 다발지역_300.gpkg\n",
            "Number of rows after removing missing values: 70\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/9. 화물차사고 다발지역/화물차사고 다발지역_500.gpkg\n",
            "Number of rows after removing missing values: 43\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_100.gpkg\n",
            "Number of rows after removing missing values: 287\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_500.gpkg\n",
            "Number of rows after removing missing values: 71\n",
            "Loaded GeoPackage file: /content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 빅데이터 마트 데이터/7. 안전/11. 보행자사고 다발지역/보행자사고 다발지역_300.gpkg\n",
            "Number of rows after removing missing values: 94\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "old_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "oiV_eChLiFQZ",
        "outputId": "87e4ac8d-87c2-4dd9-859a-767a4ba21fec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  count  occrrnc_cnt_sum  occrrnc_cnt_mean  caslt_cnt_sum  \\\n",
              "23897  55144    1.0              4.0               4.0            5.0   \n",
              "23898  55145    1.0              4.0               4.0            5.0   \n",
              "24189  55602    1.0              4.0               4.0            5.0   \n",
              "24190  55603    1.0              4.0               4.0            5.0   \n",
              "25065  56977    1.0              5.0               5.0            7.0   \n",
              "\n",
              "       caslt_cnt_mean  dth_dnv_cnt_sum  dth_dnv_cnt_mean  se_dnv_cnt_sum  \\\n",
              "23897             5.0              0.0               0.0             4.0   \n",
              "23898             5.0              0.0               0.0             4.0   \n",
              "24189             5.0              0.0               0.0             4.0   \n",
              "24190             5.0              0.0               0.0             4.0   \n",
              "25065             7.0              1.0               1.0             6.0   \n",
              "\n",
              "       se_dnv_cnt_mean  sl_dnv_cnt_sum  sl_dnv_cnt_mean  wnd_dnv_cnt_sum  \\\n",
              "23897              4.0             1.0              1.0              0.0   \n",
              "23898              4.0             1.0              1.0              0.0   \n",
              "24189              4.0             1.0              1.0              0.0   \n",
              "24190              4.0             1.0              1.0              0.0   \n",
              "25065              6.0             0.0              0.0              0.0   \n",
              "\n",
              "       wnd_dnv_cnt_mean                                           geometry  \\\n",
              "23897               0.0  MULTIPOLYGON (((128.48601 35.85309, 128.48712 ...   \n",
              "23898               0.0  MULTIPOLYGON (((128.48600 35.85218, 128.48710 ...   \n",
              "24189               0.0  MULTIPOLYGON (((128.48712 35.85308, 128.48822 ...   \n",
              "24190               0.0  MULTIPOLYGON (((128.48710 35.85218, 128.48821 ...   \n",
              "25065               0.0  MULTIPOLYGON (((128.49043 35.85215, 128.49153 ...   \n",
              "\n",
              "              위도          경도  \n",
              "23897  35.852630  128.486557  \n",
              "23898  35.851729  128.486546  \n",
              "24189  35.852621  128.487664  \n",
              "24190  35.851720  128.487653  \n",
              "25065  35.851692  128.490975  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d7c591af-dab8-4990-bb9d-b6d108f3f620\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>count</th>\n",
              "      <th>occrrnc_cnt_sum</th>\n",
              "      <th>occrrnc_cnt_mean</th>\n",
              "      <th>caslt_cnt_sum</th>\n",
              "      <th>caslt_cnt_mean</th>\n",
              "      <th>dth_dnv_cnt_sum</th>\n",
              "      <th>dth_dnv_cnt_mean</th>\n",
              "      <th>se_dnv_cnt_sum</th>\n",
              "      <th>se_dnv_cnt_mean</th>\n",
              "      <th>sl_dnv_cnt_sum</th>\n",
              "      <th>sl_dnv_cnt_mean</th>\n",
              "      <th>wnd_dnv_cnt_sum</th>\n",
              "      <th>wnd_dnv_cnt_mean</th>\n",
              "      <th>geometry</th>\n",
              "      <th>위도</th>\n",
              "      <th>경도</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>23897</th>\n",
              "      <td>55144</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.48601 35.85309, 128.48712 ...</td>\n",
              "      <td>35.852630</td>\n",
              "      <td>128.486557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23898</th>\n",
              "      <td>55145</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.48600 35.85218, 128.48710 ...</td>\n",
              "      <td>35.851729</td>\n",
              "      <td>128.486546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24189</th>\n",
              "      <td>55602</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.48712 35.85308, 128.48822 ...</td>\n",
              "      <td>35.852621</td>\n",
              "      <td>128.487664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24190</th>\n",
              "      <td>55603</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.48710 35.85218, 128.48821 ...</td>\n",
              "      <td>35.851720</td>\n",
              "      <td>128.487653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25065</th>\n",
              "      <td>56977</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.49043 35.85215, 128.49153 ...</td>\n",
              "      <td>35.851692</td>\n",
              "      <td>128.490975</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7c591af-dab8-4990-bb9d-b6d108f3f620')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d7c591af-dab8-4990-bb9d-b6d108f3f620 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d7c591af-dab8-4990-bb9d-b6d108f3f620');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-73e42c0e-0ea3-4ddd-99ca-b817f4bf3336\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-73e42c0e-0ea3-4ddd-99ca-b817f4bf3336')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-73e42c0e-0ea3-4ddd-99ca-b817f4bf3336 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "old_df.crs"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7K246hMYiJy3",
        "outputId": "f2aba2fe-c774-4a8e-b788-f42184df7b49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Geographic 2D CRS: EPSG:4326>\n",
              "Name: WGS 84\n",
              "Axis Info [ellipsoidal]:\n",
              "- Lat[north]: Geodetic latitude (degree)\n",
              "- Lon[east]: Geodetic longitude (degree)\n",
              "Area of Use:\n",
              "- name: World.\n",
              "- bounds: (-180.0, -90.0, 180.0, 90.0)\n",
              "Datum: World Geodetic System 1984 ensemble\n",
              "- Ellipsoid: WGS 84\n",
              "- Prime Meridian: Greenwich"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "old_df.iloc[0, -3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "id": "1XAaxy32iPBU",
        "outputId": "2fb4f731-00fe-4d50-8095-d3e50e4be952"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<MULTIPOLYGON (((128.486 35.853, 128.487 35.853, 128.487 35.852, 128.486 35....>"
            ],
            "image/svg+xml": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100.0\" height=\"100.0\" viewBox=\"128.4859527463831 35.85213032006086 0.0012079634804251782 0.0010000537046579439\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,71.70526069382638)\"><g><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"2.4159269608503563e-05\" opacity=\"0.6\" d=\"M 128.48600864791877,35.85308563437735 L 128.48711597047537,35.853076541857675 L 128.4871047957973,35.852175059449024 L 128.48599748577126,35.85218415166917 L 128.48600864791877,35.85308563437735 z\" /></g></g></svg>"
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 전처리한 파일 저장하기\n",
        "old_df.to_csv(os.path.join(old_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/보행노인사고.csv\"), encoding='cp949', index=False)\n",
        "jaywalk_df.to_csv(os.path.join(jaywalk_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/무단횡단사고.csv\"), encoding='cp949', index=False)\n",
        "ice_df.to_csv(os.path.join(ice_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/결빙사고.csv\"), encoding='cp949', index=False)\n",
        "truck_df.to_csv(os.path.join(truck_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/화물차사고.csv\"), encoding='cp949', index=False)\n",
        "walker_df.to_csv(os.path.join(walker_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/보행자사고.csv\"), encoding='cp949', index=False)"
      ],
      "metadata": {
        "id": "HXLn17bViQwG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 불러오기\n",
        "old_df = pd.read_csv(os.path.join(old_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/보행노인사고.csv\"), encoding='cp949')\n",
        "jaywalk_df = pd.read_csv(os.path.join(jaywalk_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/무단횡단사고.csv\"), encoding='cp949')\n",
        "ice_df = pd.read_csv(os.path.join(ice_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/결빙사고.csv\"), encoding='cp949')\n",
        "truck_df = pd.read_csv(os.path.join(truck_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/화물차사고.csv\"), encoding='cp949')\n",
        "walker_df = pd.read_csv(os.path.join(walker_f_path, \"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/보행자사고.csv\"), encoding='cp949')"
      ],
      "metadata": {
        "id": "ilbEFab6ifYC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdf_list = [old_df, jaywalk_df, ice_df, truck_df, walker_df]\n",
        "# 열이름이 동일하다 (다발지역내 사고 / 사상자 / 사망자 / 중상자 / 경상자 / 부상자 / 경상자 / 부상신고자수 합계 및 평균을 의미), TAAS API의 설명 참조\n",
        "# occrrnc_cnt : 사고건수 / caslt_cnt : 사상자수 / dth_dnv_cnt : 사망자수 / se_dnv_cnt : 중상자수 / sl_dnv_cnt : 경상자수 / wnd_dnv_cnt : 부상신고자수\n",
        "#\n",
        "\n",
        "for gdf in gdf_list:\n",
        "    print(len(gdf), gdf.columns.to_list())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XqPmr65vikBD",
        "outputId": "c098bd9e-682f-457e-c7fd-9c9fbd5a862e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "452 ['id', 'count', 'occrrnc_cnt_sum', 'occrrnc_cnt_mean', 'caslt_cnt_sum', 'caslt_cnt_mean', 'dth_dnv_cnt_sum', 'dth_dnv_cnt_mean', 'se_dnv_cnt_sum', 'se_dnv_cnt_mean', 'sl_dnv_cnt_sum', 'sl_dnv_cnt_mean', 'wnd_dnv_cnt_sum', 'wnd_dnv_cnt_mean', 'geometry', '위도', '경도']\n",
            "509 ['id', 'count', 'occrrnc_cnt_sum', 'occrrnc_cnt_mean', 'caslt_cnt_sum', 'caslt_cnt_mean', 'dth_dnv_cnt_sum', 'dth_dnv_cnt_mean', 'se_dnv_cnt_sum', 'se_dnv_cnt_mean', 'sl_dnv_cnt_sum', 'sl_dnv_cnt_mean', 'wnd_dnv_cnt_sum', 'wnd_dnv_cnt_mean', 'geometry', '위도', '경도']\n",
            "44 ['id', 'count', 'occrrnc_cnt_sum', 'occrrnc_cnt_mean', 'caslt_cnt_sum', 'caslt_cnt_mean', 'dth_dnv_cnt_sum', 'dth_dnv_cnt_mean', 'se_dnv_cnt_sum', 'se_dnv_cnt_mean', 'sl_dnv_cnt_sum', 'sl_dnv_cnt_mean', 'wnd_dnv_cnt_sum', 'wnd_dnv_cnt_mean', 'geometry', '위도', '경도']\n",
            "315 ['id', 'count', 'occrrnc_cnt_sum', 'occrrnc_cnt_mean', 'caslt_cnt_sum', 'caslt_cnt_mean', 'dth_dnv_cnt_sum', 'dth_dnv_cnt_mean', 'se_dnv_cnt_sum', 'se_dnv_cnt_mean', 'sl_dnv_cnt_sum', 'sl_dnv_cnt_mean', 'wnd_dnv_cnt_sum', 'wnd_dnv_cnt_mean', 'geometry', '위도', '경도']\n",
            "452 ['id', 'count', 'occrrnc_cnt_sum', 'occrrnc_cnt_mean', 'caslt_cnt_sum', 'caslt_cnt_mean', 'dth_dnv_cnt_sum', 'dth_dnv_cnt_mean', 'se_dnv_cnt_sum', 'se_dnv_cnt_mean', 'sl_dnv_cnt_sum', 'sl_dnv_cnt_mean', 'wnd_dnv_cnt_sum', 'wnd_dnv_cnt_mean', 'geometry', '위도', '경도']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "old_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "V8chNnIAinn1",
        "outputId": "559bded7-6c3a-40f8-a8c4-364979314d0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id  count  occrrnc_cnt_sum  occrrnc_cnt_mean  caslt_cnt_sum  \\\n",
              "0  55144    1.0              4.0               4.0            5.0   \n",
              "1  55145    1.0              4.0               4.0            5.0   \n",
              "2  55602    1.0              4.0               4.0            5.0   \n",
              "3  55603    1.0              4.0               4.0            5.0   \n",
              "4  56977    1.0              5.0               5.0            7.0   \n",
              "\n",
              "   caslt_cnt_mean  dth_dnv_cnt_sum  dth_dnv_cnt_mean  se_dnv_cnt_sum  \\\n",
              "0             5.0              0.0               0.0             4.0   \n",
              "1             5.0              0.0               0.0             4.0   \n",
              "2             5.0              0.0               0.0             4.0   \n",
              "3             5.0              0.0               0.0             4.0   \n",
              "4             7.0              1.0               1.0             6.0   \n",
              "\n",
              "   se_dnv_cnt_mean  sl_dnv_cnt_sum  sl_dnv_cnt_mean  wnd_dnv_cnt_sum  \\\n",
              "0              4.0             1.0              1.0              0.0   \n",
              "1              4.0             1.0              1.0              0.0   \n",
              "2              4.0             1.0              1.0              0.0   \n",
              "3              4.0             1.0              1.0              0.0   \n",
              "4              6.0             0.0              0.0              0.0   \n",
              "\n",
              "   wnd_dnv_cnt_mean                                           geometry  \\\n",
              "0               0.0  MULTIPOLYGON (((128.48600864791877 35.85308563...   \n",
              "1               0.0  MULTIPOLYGON (((128.48599748577126 35.85218415...   \n",
              "2               0.0  MULTIPOLYGON (((128.48711597047537 35.85307654...   \n",
              "3               0.0  MULTIPOLYGON (((128.4871047957973 35.852175059...   \n",
              "4               0.0  MULTIPOLYGON (((128.4904267228955 35.852147721...   \n",
              "\n",
              "          위도          경도  \n",
              "0  35.852630  128.486557  \n",
              "1  35.851729  128.486546  \n",
              "2  35.852621  128.487664  \n",
              "3  35.851720  128.487653  \n",
              "4  35.851692  128.490975  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-636922d6-4f6f-40e1-84b8-748178a88dc6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>count</th>\n",
              "      <th>occrrnc_cnt_sum</th>\n",
              "      <th>occrrnc_cnt_mean</th>\n",
              "      <th>caslt_cnt_sum</th>\n",
              "      <th>caslt_cnt_mean</th>\n",
              "      <th>dth_dnv_cnt_sum</th>\n",
              "      <th>dth_dnv_cnt_mean</th>\n",
              "      <th>se_dnv_cnt_sum</th>\n",
              "      <th>se_dnv_cnt_mean</th>\n",
              "      <th>sl_dnv_cnt_sum</th>\n",
              "      <th>sl_dnv_cnt_mean</th>\n",
              "      <th>wnd_dnv_cnt_sum</th>\n",
              "      <th>wnd_dnv_cnt_mean</th>\n",
              "      <th>geometry</th>\n",
              "      <th>위도</th>\n",
              "      <th>경도</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>55144</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.48600864791877 35.85308563...</td>\n",
              "      <td>35.852630</td>\n",
              "      <td>128.486557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>55145</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.48599748577126 35.85218415...</td>\n",
              "      <td>35.851729</td>\n",
              "      <td>128.486546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>55602</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.48711597047537 35.85307654...</td>\n",
              "      <td>35.852621</td>\n",
              "      <td>128.487664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>55603</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.4871047957973 35.852175059...</td>\n",
              "      <td>35.851720</td>\n",
              "      <td>128.487653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>56977</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>MULTIPOLYGON (((128.4904267228955 35.852147721...</td>\n",
              "      <td>35.851692</td>\n",
              "      <td>128.490975</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-636922d6-4f6f-40e1-84b8-748178a88dc6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-636922d6-4f6f-40e1-84b8-748178a88dc6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-636922d6-4f6f-40e1-84b8-748178a88dc6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b3e50d55-a123-4c3c-ba39-c87bcc763313\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3e50d55-a123-4c3c-ba39-c87bcc763313')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b3e50d55-a123-4c3c-ba39-c87bcc763313 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/train.csv\")\n",
        "test_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/test.csv\")\n",
        "print(train_df.shape, test_df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "skS59DfZiqV6",
        "outputId": "88546e84-3ecc-4c53-d994-1f3b583e352e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(39609, 23) (10963, 8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TRAIN, TEST 데이터 전처리 함수\n",
        "def convert_df(df):\n",
        "# 1. 사고일시, 요일 열 전처리 하는 함수\n",
        "\n",
        "    # 사고일시를 datetime 형태로 변환\n",
        "    df['사고일시'] = pd.to_datetime(df['사고일시'])\n",
        "\n",
        "    # 사고일시로부터 연/월/일/시 열 생성\n",
        "    df['year'] = df['사고일시'].dt.year\n",
        "    df['month'] = df['사고일시'].dt.month\n",
        "    df['day'] = df['사고일시'].dt.day\n",
        "    df['hour'] = df['사고일시'].dt.hour\n",
        "\n",
        "    # '사고일시' 로부터 요일 category형으로 label encoding\n",
        "    df['요일'] = df['사고일시'].dt.day_of_week.astype('category')\n",
        "    # 요일에서 '월'만 남기기\n",
        "    # df['요일'] = df['요일'].str.replace('요일','')\n",
        "\n",
        "# 2. 시군구 -> 시/군/구 구분\n",
        "    df['시'] = df['시군구'].str.split(' ').str.get(0)\n",
        "    df['군'] = df['시군구'].str.split(' ').str.get(1)\n",
        "    df['구'] = df['시군구'].str.split(' ').str.get(2)\n",
        "\n",
        "# 3. 도로형태 -> 도로형태_대 / 도로형태_중 으로 구분\n",
        "    df['도로형태_대'] = df['도로형태'].str.split(' - ').str.get(0)\n",
        "    df['도로형태_중'] = df['도로형태'].str.split(' - ').str.get(1)\n",
        "\n",
        "    return df"
      ],
      "metadata": {
        "id": "6hXluF1ekblp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = convert_df(train_df)\n",
        "test_df = convert_df(test_df)\n",
        "\n",
        "# train_df 기준으로 인코딩 할것? unique 값의 list를 만들자\n",
        "gu_list = train_df['구'].unique().tolist()\n",
        "print(gu_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t37ZlxAKkiBR",
        "outputId": "47137847-1d05-44a9-9d75-5a3d843ceb30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['대신동', '감삼동', '두산동', '복현동', '신암동', '지산동', '상인동', '태전동', '지묘동', '평리동', '신기동', '상리동', '월성동', '황금동', '구암동', '신천동', '만촌동', '남산동', '비산동', '침산동', '두류동', '신매동', '대곡동', '유가읍', '논공읍', '율하동', '시지동', '봉무동', '다사읍', '동산동', '이현동', '이천동', '수성동4가', '노원동3가', '서변동', '관음동', '학정동', '파동', '상동', '이곡동', '효목동', '읍내동', '남성로', '죽전동', '대명동', '동천동', '지저동', '사수동', '덕산동', '본리동', '용계동', '범어동', '신당동', '성당동', '용산동', '태평로3가', '도학동', '욱수동', '불로동', '칠성동1가', '장기동', '매호동', '대천동', '삼덕동1가', '수성동2가', '팔달동', '삼덕동', '진천동', '수성동3가', '가창면', '방촌동', '산격동', '월암동', '현풍읍', '구지면', '매천동', '송현동', '고성동3가', '봉덕동', '칠성동2가', '공평동', '봉산동', '괴전동', '국우동', '대현동', '노원동1가', '대봉동', '본동', '신서동', '검단동', '화원읍', '동호동', '삼덕동2가', '입석동', '중동', '삼덕동3가', '파호동', '동내동', '하빈면', '율암동', '동인동1가', '내당동', '유천동', '호산동', '교동', '옥포읍', '원대동3가', '검사동', '동인동4가', '수성동1가', '고성동2가', '각산동', '중리동', '고성동1가', '갈산동', '대림동', '호림동', '연호동', '동변동', '범물동', '계산동2가', '동문동', '고모동', '금호동', '장동', '도원동', '수창동', '동인동2가', '가천동', '노변동', '달성동', '동인동3가', '서문로2가', '동성로2가', '중대동', '사월동', '장관동', '신평동', '숙천동', '성동', '동일동', '시장북로', '서호동', '용수동', '대흥동', '동성로3가', '연경동', '원대동1가', '남일동', '부동', '송정동', '백안동', '도동', '인교동', '미대동', '노원동2가', '북성로1가', '조야동', '태평로2가', '포정동', '노곡동', '진인동', '서문로1가', '덕곡동', '문화동', '상매동', '사복동', '종로1가', '계산동1가', '상서동', '서성로1가', '원대동2가', '태평로1가', '미곡동', '사일동', '내동', '전동', '둔산동', '매여동', '완전동', '북성로2가', '하서동', '화전동', '능성동', '서성로2가', '금강동', '향촌동', '수동', '신무동', '대안동', '종로2가', '서야동', '신용동', '동성로1가', '평광동', '도남동']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seculight_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 보안등 정보.csv\", encoding= 'cp949')\n",
        "child_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 어린이 보호 구역 정보.csv\", encoding= 'cp949')\n",
        "parking_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 주차장 정보.csv\", encoding= 'cp949')\n",
        "cctv_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/대구 CCTV 정보.csv\", encoding= 'cp949')\n",
        "df_dict = {'보안등':seculight_df, '어린이보호구역':child_df, '주차장':parking_df, 'cctv':cctv_df}\n"
      ],
      "metadata": {
        "id": "0bFWAWkjkkxN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# df와 unique list(A:구)를 입력해서 '구' 값을 추출해서 열을 새로 만드는 전처리 함수\n",
        "def preprocess_df(df, A):\n",
        "    # 1) Create a new column '구' to store the values\n",
        "    df['구'] = np.nan\n",
        "\n",
        "    # 2) Iterate through each row in the data frame\n",
        "    for index, row in df.iterrows():\n",
        "        # Check if the value in '소재지지번주소' is not NaN\n",
        "        if not pd.isna(row['소재지지번주소']):\n",
        "            # Check if any value in A is present in the '소재지지번주소' column\n",
        "            for value in A:\n",
        "                if value in row['소재지지번주소']:\n",
        "                    # If found, store the value in column '구'\n",
        "                    df.at[index, '구'] = value\n",
        "                    break  # Break the loop if a match is found\n",
        "\n",
        "    return df\n"
      ],
      "metadata": {
        "id": "ezCSxjKMkzaD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for key, df in df_dict.items():\n",
        "    print(key, '|열 개수:',  len(df.columns), '|열 이름:', df.columns.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_GzuUw6kk1YE",
        "outputId": "7f17b817-8043-48b1-ba8c-5c20e064e3a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "보안등 |열 개수: 8 |열 이름: ['보안등위치명', '설치개수', '소재지도로명주소', '소재지지번주소', '위도', '경도', '설치연도', '설치형태']\n",
            "어린이보호구역 |열 개수: 12 |열 이름: ['시설종류', '대상시설명', '소재지도로명주소', '소재지지번주소', '위도', '경도', '관리기관명', '관할경찰서명', 'CCTV설치여부', 'CCTV설치대수', '보호구역도로폭', '데이터기준일자']\n",
            "주차장 |열 개수: 29 |열 이름: ['주차장관리번호', '주차장명', '주차장구분', '주차장유형', '소재지도로명주소', '소재지지번주소', '주차구획수', '급지구분', '부제시행구분', '운영요일', '평일운영시작시각', '평일운영종료시각', '토요일운영시작시각', '토요일운영종료시각', '공휴일운영시작시각', '공휴일운영종료시각', '요금정보', '주차기본시간', '주차기본요금', '추가단위시간', '추가단위요금', '1일주차권요금적용시간', '1일주차권요금', '월정기권요금', '결제방법', '특기사항', '위도', '경도', '데이터기준일자']\n",
            "cctv |열 개수: 18 |열 이름: ['무인교통단속카메라관리번호', '시도명', '시군구명', '도로종류', '도로노선번호', '도로노선명', '도로노선방향', '소재지도로명주소', '소재지지번주소', '위도', '경도', '설치장소', '단속구분', '제한속도', '단속구간위치구분', '과속단속구간길이', '보호구역구분', '설치연도']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for key, df in df_dict.items():\n",
        "     df = preprocess_df(df, gu_list)"
      ],
      "metadata": {
        "id": "2S8RpcTBk3Lk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for key, df in df_dict.items():\n",
        "    print(key, '|열 개수:',  len(df.columns), '|열 이름:', df.columns.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GS6Kfybkk5P9",
        "outputId": "07c49970-fcb8-46d0-fffb-2baa4d9bed68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "보안등 |열 개수: 9 |열 이름: ['보안등위치명', '설치개수', '소재지도로명주소', '소재지지번주소', '위도', '경도', '설치연도', '설치형태', '구']\n",
            "어린이보호구역 |열 개수: 13 |열 이름: ['시설종류', '대상시설명', '소재지도로명주소', '소재지지번주소', '위도', '경도', '관리기관명', '관할경찰서명', 'CCTV설치여부', 'CCTV설치대수', '보호구역도로폭', '데이터기준일자', '구']\n",
            "주차장 |열 개수: 30 |열 이름: ['주차장관리번호', '주차장명', '주차장구분', '주차장유형', '소재지도로명주소', '소재지지번주소', '주차구획수', '급지구분', '부제시행구분', '운영요일', '평일운영시작시각', '평일운영종료시각', '토요일운영시작시각', '토요일운영종료시각', '공휴일운영시작시각', '공휴일운영종료시각', '요금정보', '주차기본시간', '주차기본요금', '추가단위시간', '추가단위요금', '1일주차권요금적용시간', '1일주차권요금', '월정기권요금', '결제방법', '특기사항', '위도', '경도', '데이터기준일자', '구']\n",
            "cctv |열 개수: 19 |열 이름: ['무인교통단속카메라관리번호', '시도명', '시군구명', '도로종류', '도로노선번호', '도로노선명', '도로노선방향', '소재지도로명주소', '소재지지번주소', '위도', '경도', '설치장소', '단속구분', '제한속도', '단속구간위치구분', '과속단속구간길이', '보호구역구분', '설치연도', '구']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 저장하기\n",
        "seculight_df.to_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 보안등 정보_구추가.csv\", encoding= 'cp949', index=False)\n",
        "child_df.to_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 어린이 보호 구역 정보_구추가.csv\", encoding= 'cp949', index=False)\n",
        "parking_df.to_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 주차장 정보_구추가.csv\", encoding= 'cp949', index=False)\n",
        "cctv_df.to_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 CCTV 정보_구추가.csv\", encoding= 'cp949', index=False)"
      ],
      "metadata": {
        "id": "Igz8SvXwk79a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 불러오기\n",
        "seculight_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 보안등 정보_구추가.csv\", encoding= 'cp949')\n",
        "child_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 어린이 보호 구역 정보_구추가.csv\", encoding= 'cp949')\n",
        "parking_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 주차장 정보_구추가.csv\", encoding= 'cp949')\n",
        "cctv_df = pd.read_csv(\"/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/대구 CCTV 정보_구추가.csv\", encoding= 'cp949')"
      ],
      "metadata": {
        "id": "XnoxCLUTlrDU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# !sudo apt-get install -y fonts-nanum\n",
        "# !sudo fc-cache -fv\n",
        "# !rm ~/.cache/matplotlib -rf\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# matplotlib의 폰트를 Nanum 폰트로 설정\n",
        "plt.rc('font', family='NanumBarunGothic')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "nbGy_Mahl3sp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 위도, 경도에 따른 구의 분포를 확인해보자\n",
        "sns.scatterplot(x='위도', y='경도', hue='구', data=seculight_df)\n",
        "plt.legend(\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "aO2OiPo7l6Ps",
        "outputId": "f392f3e5-4758-4737-8f6c-869abf895634"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7887589083d0>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlEAAAGwCAYAAACJjDBkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOyddXhcVfrHP3fcZ5KJu2uTVNKmbhRKobi7F11Y3FmW3QV2YVlYfLFFF9kfLi0tLXX3VOLuOu4zvz/Sph2SlMIWv5/nCTxzzrnnStvc77znPd9XCIVCIURERERERERERL4Tkp/6AkREREREREREfomIIkpERERERERE5HsgiigRERERERERke+BKKJERERERERERL4HoogSEREREREREfkeiCJKREREREREROR7IIooEREREREREZHvgeynvoBfM8FgkNbWVvR6PYIg/NSXIyIiIiIiInIYhEIhbDYbCQkJSCQjx5tEEfUD0traSnJy8k99GSIiIiIiIiLfg6amJpKSkkbsF0XUD4herwcG/hAMBsNPfDUiIiIiIiIih4PVaiU5OXnwPT4Sooj6Adm/hGcwGEQRJSIiIiIi8gvj21JxxMRyEREREREREZHvgSiiRERERERERES+B6KIEhERERERERH5Hog5USIiIiIiIiK/OgKBAD6fb9g+uVyOVCr9n88hiigRERERERGRXw2hUIj29nb6+/sPOc5kMhEXF/c/+TiKIkpERERERETkV8N+ARUTE4NGoxkikkKhEE6nk87OTgDi4+O/97lEESUiIiIiIiLyqyAQCAwKKLPZPOI4tVoNQGdnJzExMd97aU9MLBcRERERERH5VbA/B0qj0Xzr2P1jRsqbOhxEESUiIiIiIiLyq+Jw8pyORE1bcTlPRETkZ4XH78cV9CMF9ArVT305IiIiIiMiiigREZEfnRaHhQ6XjQ6XnSStkSiVlmiVjh63A18wgDcYIESIXrcTjUxOtObQ9atEREREfgpEESUiIvKD4PJ5sfs9OP1+yvvaMas06GQK1DI5z+1ei9XvocbSg8XnJscYzcPjj8Pu81Bl7cYgVyKTSIlUqHH4PfhDIeK1Yv1JERGRnxdiTpSIiMgRp9Vhpbyvgw6Xg8fLV6CQSLl30yKUUhldbgfpBjNZhihuKZ7JHSWzabL38/D2pWhkCv5bu5NbN3zGHRs/54OG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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# gu_model을 만들 df를 합쳐주자\n",
        "gu_df = pd.concat(df_dict.values(), axis=0)[['위도', '경도', '구']]"
      ],
      "metadata": {
        "id": "WPln3VVHnIOn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 위도, 경도에 따른 구의 분포를 확인해보자\n",
        "sns.scatterplot(x='위도', y='경도', hue='구', data=gu_df)\n",
        "plt.legend(\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wl2PbOjpodD2",
        "outputId": "195bc909-6c58-489b-fd09-16de8f9792c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7887597cad10>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 일단 단순한 RF모델/KNN 사용해보자 :\n",
        "\n",
        "from sklearn.model_selection import cross_val_score, StratifiedKFold\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "\n",
        "gu_df = gu_df.dropna()\n",
        "X = gu_df[['위도', '경도']]\n",
        "y = gu_df['구']\n",
        "print(len(X), len(y))\n",
        "\n",
        "kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "rf_classifier = RandomForestClassifier(random_state=42)\n",
        "knn_classifier = KNeighborsClassifier(n_neighbors=3)  # You can adjust the number of neighbors\n",
        "\n",
        "classifiers = [rf_classifier, knn_classifier]\n",
        "classifier_names = ['Random Forest', 'k-Nearest Neighbors (KNN)']\n",
        "\n",
        "for clf, clf_name in zip(classifiers, classifier_names):\n",
        "    # Perform k-fold cross-validation and calculate accuracy\n",
        "    accuracy_scores = cross_val_score(clf, X, y, cv=kf, scoring='accuracy')\n",
        "\n",
        "    # Print results\n",
        "    print(f'{clf_name} Model:')\n",
        "    print(f'Accuracy Scores: {accuracy_scores}')\n",
        "    print(f'Mean Accuracy: {accuracy_scores.mean():.2%}\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5-F6alEmnZ6v",
        "outputId": "8ba0b364-a7a3-4e7b-f40c-bcb82e44baf8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "44070 44070\n",
            "Random Forest Model:\n",
            "Accuracy Scores: [0.97696846 0.97821647 0.97798956 0.97708192 0.9748128 ]\n",
            "Mean Accuracy: 97.70%\n",
            "\n",
            "k-Nearest Neighbors (KNN) Model:\n",
            "Accuracy Scores: [0.97628772 0.97492625 0.97515317 0.97424552 0.97390515]\n",
            "Mean Accuracy: 97.49%\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf_classifier = RandomForestClassifier(random_state=42)\n",
        "rf_classifier.fit(X, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "0LEAYsfQnyHS",
        "outputId": "93e016ec-a48e-499c-d730-e74889bcb0ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 저장 및 불러오기\n",
        "from joblib import dump, load\n",
        "model_filename = '/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/open/open/external_open/new/gu_model_RF.joblib'\n",
        "dump(rf_classifier, model_filename)\n",
        "\n",
        "gu_model = load(model_filename)"
      ],
      "metadata": {
        "id": "iOdrSwhjpBOK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# gu model로 gpd에서 '구'를 예측하자\n",
        "for gdf in gdf_list:\n",
        "    if '위도' in gdf.columns and '경도' in gdf.columns:\n",
        "        gdf['구'] = gu_model.predict(gdf[['위도', '경도']])\n",
        "\n",
        "    # 사용안할 열을 drop\n",
        "    cols_remove = ['geometry', 'occrrnc_cnt_mean', 'caslt_cnt_mean', 'dth_dnv_cnt_mean', 'se_dnv_cnt_mean', 'sl_dnv_cnt_mean', 'wnd_dnv_cnt_mean', '위도', '경도', 'id']\n",
        "\n",
        "    if all(column in gdf.columns for column in cols_remove):\n",
        "        gdf.drop(cols_remove, axis=1, inplace=True)\n",
        "    # gdf.reset_index(drop=True, inplace=True)"
      ],
      "metadata": {
        "id": "VGldHxw-pO9D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "old_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "sSs7Lj3-pUZD",
        "outputId": "3bee2a81-bf48-409e-a5a4-8707003657f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   count  occrrnc_cnt_sum  caslt_cnt_sum  dth_dnv_cnt_sum  se_dnv_cnt_sum  \\\n",
              "0    1.0              4.0            5.0              0.0             4.0   \n",
              "1    1.0              4.0            5.0              0.0             4.0   \n",
              "2    1.0              4.0            5.0              0.0             4.0   \n",
              "3    1.0              4.0            5.0              0.0             4.0   \n",
              "4    1.0              5.0            7.0              1.0             6.0   \n",
              "\n",
              "   sl_dnv_cnt_sum  wnd_dnv_cnt_sum    구  \n",
              "0             1.0              0.0  호산동  \n",
              "1             1.0              0.0  호산동  \n",
              "2             1.0              0.0  신당동  \n",
              "3             1.0              0.0  호산동  \n",
              "4             0.0              0.0  신당동  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7666d5a0-ea92-4b08-9264-990ff7ae3788\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>occrrnc_cnt_sum</th>\n",
              "      <th>caslt_cnt_sum</th>\n",
              "      <th>dth_dnv_cnt_sum</th>\n",
              "      <th>se_dnv_cnt_sum</th>\n",
              "      <th>sl_dnv_cnt_sum</th>\n",
              "      <th>wnd_dnv_cnt_sum</th>\n",
              "      <th>구</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>호산동</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>호산동</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>신당동</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>호산동</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>신당동</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7666d5a0-ea92-4b08-9264-990ff7ae3788')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7666d5a0-ea92-4b08-9264-990ff7ae3788 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7666d5a0-ea92-4b08-9264-990ff7ae3788');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a71666ca-8102-41a2-9c09-38367077f42b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a71666ca-8102-41a2-9c09-38367077f42b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a71666ca-8102-41a2-9c09-38367077f42b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 각 df로부터 구 기준으로 집계된 새로운 df들을 만들자 (agg_dfs에 저장)\n",
        "def create_agg_df(dataframes):\n",
        "\n",
        "    aggregated_dfs = []\n",
        "\n",
        "    for df in dataframes:\n",
        "        # Perform groupby operation and aggregate based on the specified column\n",
        "        aggregated_df = df.groupby('구').sum().reset_index()\n",
        "        aggregated_dfs.append(aggregated_df)\n",
        "\n",
        "    return aggregated_dfs\n",
        "\n",
        "# Example: Create aggregated data frames based on the 'old' column\n",
        "agg_dfs = create_agg_df(gdf_list)\n"
      ],
      "metadata": {
        "id": "Y379kWWZpXah"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "agg_dfs[-1].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "SP_i_0-hpZuu",
        "outputId": "a3dd5eb1-2923-419e-e5d1-bb91ae2a0c66"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     구  count  occrrnc_cnt_sum  caslt_cnt_sum  dth_dnv_cnt_sum  \\\n",
              "0  감삼동   15.0             72.0           96.0              3.0   \n",
              "1  공평동    1.0              4.0            6.0              0.0   \n",
              "2   교동    4.0             16.0           24.0              0.0   \n",
              "3  구암동    1.0              4.0            4.0              0.0   \n",
              "4  남산동    9.0             36.0           69.0              0.0   \n",
              "\n",
              "   se_dnv_cnt_sum  sl_dnv_cnt_sum  wnd_dnv_cnt_sum  \n",
              "0            72.0            21.0              0.0  \n",
              "1             4.0             2.0              0.0  \n",
              "2            16.0             8.0              0.0  \n",
              "3             4.0             0.0              0.0  \n",
              "4            36.0            28.0              5.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5252312b-2ed0-411e-bffe-dbc9c9882890\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>구</th>\n",
              "      <th>count</th>\n",
              "      <th>occrrnc_cnt_sum</th>\n",
              "      <th>caslt_cnt_sum</th>\n",
              "      <th>dth_dnv_cnt_sum</th>\n",
              "      <th>se_dnv_cnt_sum</th>\n",
              "      <th>sl_dnv_cnt_sum</th>\n",
              "      <th>wnd_dnv_cnt_sum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>감삼동</td>\n",
              "      <td>15.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>공평동</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>교동</td>\n",
              "      <td>4.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>구암동</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>남산동</td>\n",
              "      <td>9.0</td>\n",
              "      <td>36.0</td>\n",
              "      <td>69.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>36.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5252312b-2ed0-411e-bffe-dbc9c9882890')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5252312b-2ed0-411e-bffe-dbc9c9882890 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5252312b-2ed0-411e-bffe-dbc9c9882890');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c7063f7f-b92e-4687-9edf-262e27517ea8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c7063f7f-b92e-4687-9edf-262e27517ea8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c7063f7f-b92e-4687-9edf-262e27517ea8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# train 데이터와 합쳐주기 위해서 각 집계된 리스트의 열이름을 구별해서 합쳐주자\n",
        "string_list = ['old', 'jay', 'ice', 'truck', 'walker']\n",
        "\n",
        "# Iterate over each data frame in the list and modify column names\n",
        "for i, (agg_df, prefix) in enumerate(zip(agg_dfs, string_list)):\n",
        "    if prefix != '구':\n",
        "        # Modify column names based on the rules\n",
        "        new_column_names = [prefix + '_' + col if col != '구' else col for col in agg_df.columns]\n",
        "        agg_df.columns = new_column_names\n"
      ],
      "metadata": {
        "id": "IIClYA0Opc-T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for df in agg_dfs:\n",
        "    print(df.columns.to_list() )\n",
        "    # print(len(df), len(df['구'].unique()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OWXFfWxzpgbX",
        "outputId": "8141d0f5-69b4-49d6-a70c-ce204f3f237e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['구', 'old_count', 'old_occrrnc_cnt_sum', 'old_caslt_cnt_sum', 'old_dth_dnv_cnt_sum', 'old_se_dnv_cnt_sum', 'old_sl_dnv_cnt_sum', 'old_wnd_dnv_cnt_sum']\n",
            "['구', 'jay_count', 'jay_occrrnc_cnt_sum', 'jay_caslt_cnt_sum', 'jay_dth_dnv_cnt_sum', 'jay_se_dnv_cnt_sum', 'jay_sl_dnv_cnt_sum', 'jay_wnd_dnv_cnt_sum']\n",
            "['구', 'ice_count', 'ice_occrrnc_cnt_sum', 'ice_caslt_cnt_sum', 'ice_dth_dnv_cnt_sum', 'ice_se_dnv_cnt_sum', 'ice_sl_dnv_cnt_sum', 'ice_wnd_dnv_cnt_sum']\n",
            "['구', 'truck_count', 'truck_occrrnc_cnt_sum', 'truck_caslt_cnt_sum', 'truck_dth_dnv_cnt_sum', 'truck_se_dnv_cnt_sum', 'truck_sl_dnv_cnt_sum', 'truck_wnd_dnv_cnt_sum']\n",
            "['구', 'walker_count', 'walker_occrrnc_cnt_sum', 'walker_caslt_cnt_sum', 'walker_dth_dnv_cnt_sum', 'walker_se_dnv_cnt_sum', 'walker_sl_dnv_cnt_sum', 'walker_wnd_dnv_cnt_sum']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# '구'를 기준으로 merge 하자\n",
        "\n",
        "from functools import reduce\n",
        "\n",
        "agg_merged_df = reduce(lambda left, right: pd.merge(left, right, on='구', how='outer'), agg_dfs)\n",
        "agg_merged_df = agg_merged_df.fillna(0)\n",
        "print(agg_merged_df.shape, agg_merged_df.columns.to_list())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dWPVmS8Dp5xi",
        "outputId": "3e7a7489-61fd-4e61-f59e-d25ab8f3eca6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(89, 36) ['구', 'old_count', 'old_occrrnc_cnt_sum', 'old_caslt_cnt_sum', 'old_dth_dnv_cnt_sum', 'old_se_dnv_cnt_sum', 'old_sl_dnv_cnt_sum', 'old_wnd_dnv_cnt_sum', 'jay_count', 'jay_occrrnc_cnt_sum', 'jay_caslt_cnt_sum', 'jay_dth_dnv_cnt_sum', 'jay_se_dnv_cnt_sum', 'jay_sl_dnv_cnt_sum', 'jay_wnd_dnv_cnt_sum', 'ice_count', 'ice_occrrnc_cnt_sum', 'ice_caslt_cnt_sum', 'ice_dth_dnv_cnt_sum', 'ice_se_dnv_cnt_sum', 'ice_sl_dnv_cnt_sum', 'ice_wnd_dnv_cnt_sum', 'truck_count', 'truck_occrrnc_cnt_sum', 'truck_caslt_cnt_sum', 'truck_dth_dnv_cnt_sum', 'truck_se_dnv_cnt_sum', 'truck_sl_dnv_cnt_sum', 'truck_wnd_dnv_cnt_sum', 'walker_count', 'walker_occrrnc_cnt_sum', 'walker_caslt_cnt_sum', 'walker_dth_dnv_cnt_sum', 'walker_se_dnv_cnt_sum', 'walker_sl_dnv_cnt_sum', 'walker_wnd_dnv_cnt_sum']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = pd.merge(train_df, agg_merged_df, on='구', how='left').fillna(0)\n",
        "test_df = pd.merge(test_df, agg_merged_df, on='구', how='left').fillna(0)\n",
        "print(train_df.shape, test_df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IrvYEWU1p_1i",
        "outputId": "5b7d6212-8ee9-44b0-97c6-3763507dc770"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(39609, 67) (10963, 52)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-x_b6OElqBg_",
        "outputId": "fe4b6ce4-e0ec-4bc2-b492-e36296670112"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['ID', '사고일시', '요일', '기상상태', '시군구', '도로형태', '노면상태', '사고유형', 'year',\n",
              "       'month', 'day', 'hour', '시', '군', '구', '도로형태_대', '도로형태_중', 'old_count',\n",
              "       'old_occrrnc_cnt_sum', 'old_caslt_cnt_sum', 'old_dth_dnv_cnt_sum',\n",
              "       'old_se_dnv_cnt_sum', 'old_sl_dnv_cnt_sum', 'old_wnd_dnv_cnt_sum',\n",
              "       'jay_count', 'jay_occrrnc_cnt_sum', 'jay_caslt_cnt_sum',\n",
              "       'jay_dth_dnv_cnt_sum', 'jay_se_dnv_cnt_sum', 'jay_sl_dnv_cnt_sum',\n",
              "       'jay_wnd_dnv_cnt_sum', 'ice_count', 'ice_occrrnc_cnt_sum',\n",
              "       'ice_caslt_cnt_sum', 'ice_dth_dnv_cnt_sum', 'ice_se_dnv_cnt_sum',\n",
              "       'ice_sl_dnv_cnt_sum', 'ice_wnd_dnv_cnt_sum', 'truck_count',\n",
              "       'truck_occrrnc_cnt_sum', 'truck_caslt_cnt_sum', 'truck_dth_dnv_cnt_sum',\n",
              "       'truck_se_dnv_cnt_sum', 'truck_sl_dnv_cnt_sum', 'truck_wnd_dnv_cnt_sum',\n",
              "       'walker_count', 'walker_occrrnc_cnt_sum', 'walker_caslt_cnt_sum',\n",
              "       'walker_dth_dnv_cnt_sum', 'walker_se_dnv_cnt_sum',\n",
              "       'walker_sl_dnv_cnt_sum', 'walker_wnd_dnv_cnt_sum'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "agg_sec_df = seculight_df[['구', '설치개수']].groupby(['구']).sum().reset_index()\n",
        "agg_sec_df.columns = ['구', '보안등_수']\n",
        "agg_sec_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "wp7d5Lv5qF9K",
        "outputId": "041d244b-3f7b-47bd-f2a1-352ac1a0f7b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     구  보안등_수\n",
              "0  가창면   1123\n",
              "1  각산동    139\n",
              "2  갈산동    351\n",
              "3  감삼동    941\n",
              "4  검단동    391"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e706bff8-6c3f-4318-9b3a-cb1c7974e74e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>구</th>\n",
              "      <th>보안등_수</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>가창면</td>\n",
              "      <td>1123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>각산동</td>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>갈산동</td>\n",
              "      <td>351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>감삼동</td>\n",
              "      <td>941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>검단동</td>\n",
              "      <td>391</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e706bff8-6c3f-4318-9b3a-cb1c7974e74e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e706bff8-6c3f-4318-9b3a-cb1c7974e74e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e706bff8-6c3f-4318-9b3a-cb1c7974e74e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bd7fe49b-24b4-429f-9d1f-556b1862fe9d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd7fe49b-24b4-429f-9d1f-556b1862fe9d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bd7fe49b-24b4-429f-9d1f-556b1862fe9d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "child_df['count'] = 1\n",
        "agg_child_df = child_df[['구', 'CCTV설치대수', 'count']].groupby('구').sum().reset_index()\n",
        "agg_child_df.columns = ['구', '어린이_CCTV_설치대수', '어린이구역_수']\n",
        "agg_child_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "6r21gabYqUwK",
        "outputId": "a92da9f6-e8ae-469d-9bed-1feaaa197ca0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       구  어린이_CCTV_설치대수  어린이구역_수\n",
              "0    가창면            0.0        8\n",
              "1    검단동            4.0        1\n",
              "2  고성동1가            2.0        1\n",
              "3  고성동2가            2.0        1\n",
              "4    관음동           22.0        5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4113b914-258b-4778-b0ba-d7f64a20057d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>구</th>\n",
              "      <th>어린이_CCTV_설치대수</th>\n",
              "      <th>어린이구역_수</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>가창면</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>검단동</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>고성동1가</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>고성동2가</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>관음동</td>\n",
              "      <td>22.0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4113b914-258b-4778-b0ba-d7f64a20057d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4113b914-258b-4778-b0ba-d7f64a20057d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4113b914-258b-4778-b0ba-d7f64a20057d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f542f2b7-f9c1-4b78-8b6b-d2c571d396d1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f542f2b7-f9c1-4b78-8b6b-d2c571d396d1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f542f2b7-f9c1-4b78-8b6b-d2c571d396d1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "agg_csv_dfs = [agg_sec_df, agg_child_df]\n",
        "\n",
        "agg_csv_df = reduce(lambda left, right: pd.merge(left, right, on='구', how='outer'), agg_csv_dfs)\n",
        "agg_csv_df = agg_csv_df.fillna(0)\n",
        "print(agg_csv_df.shape, len(agg_csv_df['구'].unique()), agg_csv_df.columns.to_list())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R8lqX4cwqYv6",
        "outputId": "e3a825dd-4571-4cb3-efcb-e56fbb50515a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(181, 4) 181 ['구', '보안등_수', '어린이_CCTV_설치대수', '어린이구역_수']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = pd.merge(train_df, agg_csv_df, on='구', how='left').fillna(0)\n",
        "test_df = pd.merge(test_df, agg_csv_df, on='구', how='left').fillna(0)\n",
        "# print(train_df.shape, test_df.shape)"
      ],
      "metadata": {
        "id": "BJ8gpvN0rzeC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import xgboost as xgb\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.svm import SVR\n",
        "from math import sqrt\n",
        "from lightgbm import LGBMRegressor\n",
        "\n",
        "\n",
        "\n",
        "# Date processing and encoding\n",
        "train_df['사고일시'] = pd.to_datetime(train_df['사고일시'])\n",
        "train_df['년'] = train_df['사고일시'].dt.year\n",
        "train_df['월'] = train_df['사고일시'].dt.month\n",
        "train_df['일'] = train_df['사고일시'].dt.day\n",
        "train_df['시간'] = train_df['사고일시'].dt.hour\n",
        "\n",
        "test_df['사고일시'] = pd.to_datetime(test_df['사고일시'])\n",
        "test_df['년'] = test_df['사고일시'].dt.year\n",
        "test_df['월'] = test_df['사고일시'].dt.month\n",
        "test_df['일'] = test_df['사고일시'].dt.day\n",
        "test_df['시간'] = test_df['사고일시'].dt.hour\n",
        "\n",
        "train_encoded = pd.get_dummies(train_df.drop(['사고일시', 'ID', 'ECLO'], axis=1))\n",
        "test_encoded = pd.get_dummies(test_df.drop(['사고일시', 'ID'], axis=1))\n",
        "final_train, final_test = train_encoded.align(test_encoded, join='inner', axis=1)\n",
        "\n",
        "X_train = final_train\n",
        "y_train = train_df['ECLO']\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "gweGTaJGw8D_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# RandomForest and GradientBoosting models\n",
        "rf_models = [RandomForestRegressor(n_estimators=100 + i*10 ).fit(X_train, y_train) for i in range(5)]\n",
        "gb_models = [GradientBoostingRegressor(n_estimators=100 + i*10).fit(X_train, y_train) for i in range(2)]\n",
        "\n",
        "rf_predictions_list = [model.predict(final_test) for model in rf_models]\n",
        "gb_predictions_list = [model.predict(final_test) for model in gb_models]\n",
        "\n",
        "rf_mean_predictions = np.mean(rf_predictions_list, axis=0)\n",
        "gb_mean_predictions = np.mean(gb_predictions_list, axis=0)"
      ],
      "metadata": {
        "id": "epoAoGIAxrXE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# XGBoost models\n",
        "xgb_models = []\n",
        "xgb_predictions_list = []\n",
        "\n",
        "\n",
        "for i in range(150):\n",
        "    model = xgb.XGBRegressor(objective='reg:squarederror',\n",
        "                             n_estimators=50 + 50 * i,\n",
        "                             max_depth=5,\n",
        "                             learning_rate=0.1,\n",
        "                             alpha=10 ,\n",
        "                             n_jobs=-1 ,\n",
        "                             gamma =0.01 ,\n",
        "                             subsample= 0.75,\n",
        "                             colsample_bytree=0.3,\n",
        "                             reg_lambda=10)\n",
        "    model.fit(X_train, y_train)\n",
        "    xgb_models.append(model)\n",
        "    predictions = model.predict(final_test)\n",
        "    xgb_predictions_list.append(predictions)\n",
        "\n",
        "xgb_mean_predictions = np.mean(xgb_predictions_list, axis=0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "n5O7J6L0xvXL",
        "outputId": "f90f7d86-102f-4d30-9004-bcf02a711a31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-97-e834e0861156>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m                              \u001b[0mcolsample_bytree\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m                              reg_lambda=10)\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m     \u001b[0mxgb_models\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfinal_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    727\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    728\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    731\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)\u001b[0m\n\u001b[1;32m   1084\u001b[0m                 \u001b[0mxgb_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_metric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1085\u001b[0m             )\n\u001b[0;32m-> 1086\u001b[0;31m             self._Booster = train(\n\u001b[0m\u001b[1;32m   1087\u001b[0m                 \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m                 \u001b[0mtrain_dmatrix\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    727\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    728\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    731\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, custom_metric)\u001b[0m\n\u001b[1;32m    179\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbefore_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mafter_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   2048\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2049\u001b[0m             _check_call(\n\u001b[0;32m-> 2050\u001b[0;31m                 _LIB.XGBoosterUpdateOneIter(\n\u001b[0m\u001b[1;32m   2051\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_int\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miteration\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2052\u001b[0m                 )\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(xgb_mean_predictions)"
      ],
      "metadata": {
        "id": "onDrJdmZYPUJ",
        "outputId": "4ec30350-3fd3-4fca-de3a-5b363a021918",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4.740345  3.9236908 6.212136  ... 5.581085  6.2923307 5.466489 ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# SVM Model\n",
        "svm_model = SVR().fit(X_train, y_train)\n",
        "svm_predictions = svm_model.predict(final_test)"
      ],
      "metadata": {
        "id": "9XI1Mb5tx03i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# LightGBM Model\n",
        "lgbm_models = [LGBMRegressor(n_estimators=100 + i*10).fit(X_train, y_train) for i in range(3)]\n",
        "lgbm_predictions_list = [model.predict(final_test) for model in lgbm_models]\n",
        "lgbm_mean_predictions = np.mean(lgbm_predictions_list, axis=0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4IGlkLH0x6ae",
        "outputId": "7335959b-35a5-4081-f0e0-864a057ba10f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.014538 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 1823\n",
            "[LightGBM] [Info] Number of data points in the train set: 39609, number of used features: 386\n",
            "[LightGBM] [Info] Start training from score 4.726704\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.014280 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 1823\n",
            "[LightGBM] [Info] Number of data points in the train set: 39609, number of used features: 386\n",
            "[LightGBM] [Info] Start training from score 4.726704\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.013951 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 1823\n",
            "[LightGBM] [Info] Number of data points in the train set: 39609, number of used features: 386\n",
            "[LightGBM] [Info] Start training from score 4.726704\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# from catboost import CatBoostRegressor\n",
        "\n",
        "# # CatBoost Model\n",
        "# cb_models = [CatBoostRegressor(iterations=100 + i*10, silent=True).fit(X_train, y_train) for i in range(3)]\n",
        "# cb_predictions_list = [model.predict(final_test) for model in cb_models]\n",
        "# cb_mean_predictions = np.mean(cb_predictions_list, axis=0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 274
        },
        "id": "DNzortX6x8XX",
        "outputId": "880f7571-9d69-4f06-fa68-d8df8732dc3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-88-b275b5d042c9>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mcatboost\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCatBoostRegressor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# CatBoost Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mcb_models\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCatBoostRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msilent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mcb_predictions_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfinal_test\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcb_models\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'catboost'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "ensemble_predictions = (rf_mean_predictions + gb_mean_predictions + xgb_mean_predictions + svm_predictions  ) /4\n",
        "ensemble_predictions = np.where(ensemble_predictions < 0, 0, ensemble_predictions)\n",
        "\n",
        "# Create submission file\n",
        "submission = pd.DataFrame({'ID': test_df['ID'], 'ECLO': ensemble_predictions})\n",
        "submission.to_csv('/content/drive/MyDrive/DACON/대구 교통사고 피해 예측AI/예측/12_02.csv', index=False)"
      ],
      "metadata": {
        "id": "Yy-8q2Six-RG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'ensemble_predictions' is your predictions array\n",
        "plt.hist(ensemble_predictions, bins=20, edgecolor='black')\n",
        "plt.title('Distribution of Ensemble Predictions')\n",
        "plt.xlabel('Predicted Value')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "# Assuming you have a 'y_test' array with actual values\n",
        "plt.scatter(y_test, ensemble_predictions)\n",
        "plt.title('Actual vs Predicted Values')\n",
        "plt.xlabel('Actual Values')\n",
        "plt.ylabel('Predicted Values')\n",
        "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=3) # Diagonal line\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "LujhvGuTCTfj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Assuming you have a 'y_test' array with the actual values\n",
        "# Replace 'ensemble_predictions' with your model's predictions on the test set\n",
        "mse = mean_squared_error(y_test, ensemble_predictions)\n",
        "r2 = r2_score(y_test, ensemble_predictions)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "D85982IYAn0a",
        "outputId": "74fcf1d5-af69-4968-e45f-c903ce639acc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-93-c88ad8f1828c>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Assuming you have a 'y_test' array with the actual values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Replace 'ensemble_predictions' with your model's predictions on the test set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensemble_predictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mr2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensemble_predictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36mmean_squared_error\u001b[0;34m(y_true, y_pred, sample_weight, multioutput, squared)\u001b[0m\n\u001b[1;32m    440\u001b[0m         \u001b[0;34m'uniform_average'\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m             \u001b[0mErrors\u001b[0m \u001b[0mof\u001b[0m \u001b[0mall\u001b[0m \u001b[0moutputs\u001b[0m \u001b[0mare\u001b[0m \u001b[0maveraged\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0muniform\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 442\u001b[0;31m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    443\u001b[0m     \u001b[0msquared\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefault\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    444\u001b[0m         \u001b[0mIf\u001b[0m \u001b[0;32mTrue\u001b[0m \u001b[0mreturns\u001b[0m \u001b[0mMSE\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mFalse\u001b[0m \u001b[0mreturns\u001b[0m \u001b[0mRMSE\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36m_check_reg_targets\u001b[0;34m(y_true, y_pred, multioutput, dtype)\u001b[0m\n\u001b[1;32m     98\u001b[0m     \"\"\"\n\u001b[1;32m     99\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 100\u001b[0;31m     \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    101\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    395\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    396\u001b[0m     \u001b[0mChecks\u001b[0m \u001b[0mwhether\u001b[0m \u001b[0mall\u001b[0m \u001b[0mobjects\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m \u001b[0mhave\u001b[0m \u001b[0mthe\u001b[0m \u001b[0msame\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mlength\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 397\u001b[0;31m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    398\u001b[0m     \u001b[0mParameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m     \u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [8814, 10963]"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1) 대구 데이터만 사용 (시, 군 drop)\n",
        "features = ['month', 'day', 'hour', '요일', '기상상태', '구',  '도로형태_대', '도로형태_중',  '노면상태', '사고유형', 'old_count',\n",
        "       'jay_count', 'ice_count',  'truck_count', 'walker_count',\n",
        "       '보안등_수', '어린이_CCTV_설치대수', '어린이구역_수']\n",
        "labels = ['ECLO']\n",
        "\n",
        "# feature selection 재선택\n",
        "X = train_df[features]\n",
        "X_test = test_df[features]\n",
        "\n",
        "y = train_df[labels]\n",
        "\n",
        "print(X.shape, X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iioYFrAnqeF5",
        "outputId": "35901cf0-8485-45df-c16e-79241020dca5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(39609, 18) (10963, 18)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install -U scikit-learn\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "id": "ZOOPV5jnu4_g",
        "outputId": "0b1d60ea-ecd0-4486-ecb2-50b82cb6b215"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Collecting scikit-learn\n",
            "  Downloading scikit_learn-1.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (10.8 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.8/10.8 MB\u001b[0m \u001b[31m71.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy<2.0,>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.23.5)\n",
            "Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.2.0)\n",
            "Installing collected packages: scikit-learn\n",
            "  Attempting uninstall: scikit-learn\n",
            "    Found existing installation: scikit-learn 1.2.2\n",
            "    Uninstalling scikit-learn-1.2.2:\n",
            "      Successfully uninstalled scikit-learn-1.2.2\n",
            "Successfully installed scikit-learn-1.3.2\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "sklearn"
                ]
              }
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# Split the data into training and validation sets\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Convert the dataset into an optimized data structure called Dmatrix that XGBoost supports\n",
        "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
        "dval = xgb.DMatrix(X_val, label=y_val)\n",
        "dtest = xgb.DMatrix(X_test)\n",
        "\n",
        "# Set the parameters for XGBoost\n",
        "params = {\n",
        "    'max_depth': 6,\n",
        "    'eta': 0.3,\n",
        "    'objective': 'multi:softmax',  # Change this to 'reg:squarederror' for regression problems\n",
        "    'num_class': 3  # Update this to the number of classes in your label\n",
        "}\n",
        "\n",
        "# Specify the number of training iterations\n",
        "num_round = 50\n",
        "\n",
        "# Train the model\n",
        "bst = xgb.train(params, dtrain, num_round)\n",
        "\n",
        "# Predictions on validation set\n",
        "preds = bst.predict(dval)\n",
        "print(\"Validation Accuracy:\", accuracy_score(y_val, preds))\n",
        "print(\"Classification Report:\\n\", classification_report(y_val, preds))\n",
        "\n",
        "# Predictions on test set\n",
        "test_preds = bst.predict(dtest)\n",
        "\n",
        "# If you want to save predictions\n",
        "np.savetxt(\"test_predictions.csv\", test_preds, delimiter=\",\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "id": "Cp5FLQEYuf4s",
        "outputId": "c2d5d571-a269-4a1d-a211-34b10a786926"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-75-595e71786343>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Convert the dataset into an optimized data structure called Dmatrix that XGBoost supports\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mdtrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDMatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mdval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDMatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mdtest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDMatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    727\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    728\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    731\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, label, weight, base_margin, missing, silent, feature_names, feature_types, nthread, group, qid, label_lower_bound, label_upper_bound, feature_weights, enable_categorical, data_split_mode)\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m         handle, feature_names, feature_types = dispatch_data_backend(\n\u001b[0m\u001b[1;32m    857\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m             \u001b[0mmissing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmissing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/data.py\u001b[0m in \u001b[0;36mdispatch_data_backend\u001b[0;34m(data, missing, threads, feature_names, feature_types, enable_categorical, data_split_mode)\u001b[0m\n\u001b[1;32m   1087\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_is_pandas_df\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1089\u001b[0;31m         return _from_pandas_df(\n\u001b[0m\u001b[1;32m   1090\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menable_categorical\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmissing\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreads\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_types\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m         )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/data.py\u001b[0m in \u001b[0;36m_from_pandas_df\u001b[0;34m(data, enable_categorical, missing, nthread, feature_names, feature_types)\u001b[0m\n\u001b[1;32m    520\u001b[0m     \u001b[0mfeature_types\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mOptional\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mFeatureTypes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    521\u001b[0m ) -> DispatchedDataBackendReturnType:\n\u001b[0;32m--> 522\u001b[0;31m     data, feature_names, feature_types = _transform_pandas_df(\n\u001b[0m\u001b[1;32m    523\u001b[0m         \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menable_categorical\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_types\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m     )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/data.py\u001b[0m in \u001b[0;36m_transform_pandas_df\u001b[0;34m(data, enable_categorical, feature_names, feature_types, meta, meta_type)\u001b[0m\n\u001b[1;32m    488\u001b[0m             \u001b[0;32mor\u001b[0m \u001b[0mis_pa_ext_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m         ):\n\u001b[0;32m--> 490\u001b[0;31m             \u001b[0m_invalid_dataframe_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    491\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_pa_ext_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m             \u001b[0mpyarrow_extension\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/data.py\u001b[0m in \u001b[0;36m_invalid_dataframe_dtype\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    306\u001b[0m     \u001b[0mtype_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"DataFrame.dtypes for data must be int, float, bool or category.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    307\u001b[0m     \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"\"\"{type_err} {_ENABLE_CAT_ERR} {err}\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 308\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: DataFrame.dtypes for data must be int, float, bool or category. When categorical type is supplied, The experimental DMatrix parameter`enable_categorical` must be set to `True`.  Invalid columns:ID: object, 사고일시: datetime64[ns], 시군구: object, 도로형태: object, 사고유형 - 세부분류: object, 법규위반: object, 가해운전자 차종: object, 가해운전자 성별: object, 가해운전자 연령: object, 가해운전자 상해정도: object, 피해운전자 차종: object, 피해운전자 성별: object, 피해운전자 연령: object, 피해운전자 상해정도: object, 시: object, 군: object"
          ]
        }
      ]
    }
  ]
}